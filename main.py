import os
from crewai import Agent, Task, Crew, Process
from langchain_community.llms import Ollama

# used for Ollama and a local model
ollama_openhermes = Ollama(model="openhermes")

# either use api key for gpt, or just some string for local
os.environ["OPENAI_API_KEY"] = "sk-1111"


class InteractiveAgent(Agent):
    def interact(self, prompt):
        # Allow the agent to interact with the user or external inputs
        return self.llm.complete(prompt)

# Create a Researcher agent
researcher = InteractiveAgent(
    role='Researcher',
    goal='Generate innovative ideas for teaching someone new to backend engineering',
    backstory='An imaginative expert in the field, you thrive on creativity and innovation, aiming to redefine how complex topics are introduced to beginners.',
    verbose=True,
    llm=ollama_openhermes
)

# Create a Writer agent
writer = InteractiveAgent(
    role='Writer',
    goal='Craft a dynamic and immersive piece of text to explain the chosen topic',
    verbose=True,
    backstory='A storyteller at heart, your task is to transform the innovative ideas generated by the Researcher into a captivating narrative that engages and educates.',
    llm=ollama_openhermes
)

# Create an Examiner agent
examiner = InteractiveAgent(
    role='Examiner',
    goal='Generate dynamic and adaptive test questions with varying difficulty levels',
    verbose=True,
    backstory='With a focus on personalized assessment, your role is to create dynamic test questions that adapt to the learnerâ€™s progress, ensuring a tailored and effective evaluation.',
    llm=ollama_openhermes
)

# Task for the Researcher
research_task = Task(
    description='Generate innovative ideas for teaching someone new to backend engineering',
    agent=researcher
)

# Task for the Writer
write_task = Task(
    description='Craft a dynamic and immersive piece of text to explain the chosen topic using innovative ideas',
    agent=writer
)

# Task for the Examiner
exam_task = Task(
    description='Generate dynamic and adaptive test questions with varying difficulty levels',
    agent=examiner
)

# Instantiate the crew with a sequential process
innovative_educational_crew = Crew(
    agents=[researcher, writer, examiner],
    tasks=[research_task, write_task, exam_task],
    process=Process.sequential,
    llm=ollama_openhermes
)

# Get the crew to work!
result = innovative_educational_crew.kickoff()

print("######################")
print(result)